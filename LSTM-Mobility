{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"LSTM-Mobility","provenance":[{"file_id":"https://github.com/dlmacedo/starter-academic/blob/master/content/courses/deeplearning/notebooks/pytorch/Time_Series_Prediction_with_LSTM_Using_PyTorch.ipynb","timestamp":1627582110926}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"markdown","metadata":{"id":"xSItPJipBaZ5"},"source":["## Library"]},{"cell_type":"code","metadata":{"id":"wb-Z7wNKUJko"},"source":["import numpy as np\n","import matplotlib.pyplot as plt\n","import pandas as pd\n","import torch\n","import torch.nn as nn\n","from torch.autograd import Variable\n","from sklearn.preprocessing import MinMaxScaler\n","\n","from sklearn.metrics import mean_squared_error\n","from sklearn.metrics import mean_absolute_error\n"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"QUsaxkyZfQg6"},"source":["## Dataset Import"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gC9qSSdrdvCh","executionInfo":{"status":"ok","timestamp":1628607138717,"user_tz":-330,"elapsed":94791,"user":{"displayName":"Divya Ann Kurien","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhwVAxDCe4By3bFYuDBIMqEewXYJvrwZz0oMsWGSmU=s64","userId":"04998150813017052277"}},"outputId":"d2914bab-42e8-4ae7-cff2-f8ef4b5625c9"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mounted at /content/drive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"zCslV5-CdOQk"},"source":["training_set = pd.read_csv('/content/drive/MyDrive/IIIT-K_Internship/Mobility-prediction/data/vanet-trace-creteil-20130924-0700-0900.csv', sep=';')\n"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"FpmK-lt5dOS8"},"source":["training_set=training_set[training_set['vehicle_id']=='BusFlowNorthSouth0.0']\n","cols = ['vehicle_slope', 'vehicle_lane', 'vehicle_angle', 'vehicle_type', 'vehicle_pos', 'vehicle_speed','vehicle_id', 'vehicle_x']\n","training_set.drop(cols, axis=1, inplace=True)"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"8m0Umv30dOVp"},"source":["training_set = training_set.iloc[:,1:2].values"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tFZhZvixeD9C","executionInfo":{"status":"ok","timestamp":1628607408387,"user_tz":-330,"elapsed":8,"user":{"displayName":"Divya Ann Kurien","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhwVAxDCe4By3bFYuDBIMqEewXYJvrwZz0oMsWGSmU=s64","userId":"04998150813017052277"}},"outputId":"039f98c4-5b19-4f05-d753-8d95a1aac31b"},"source":["training_set"],"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[722.81],\n","       [721.7 ],\n","       [718.6 ],\n","       [711.04],\n","       [703.76],\n","       [694.12],\n","       [681.2 ],\n","       [668.51],\n","       [656.84],\n","       [649.16],\n","       [644.23],\n","       [643.09],\n","       [642.95],\n","       [642.93],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [642.91],\n","       [641.54],\n","       [638.  ],\n","       [635.22],\n","       [632.4 ],\n","       [626.11],\n","       [620.46],\n","       [615.94],\n","       [615.3 ],\n","       [615.25],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [615.24],\n","       [613.56],\n","       [609.71],\n","       [603.28],\n","       [596.02],\n","       [593.02],\n","       [593.02],\n","       [593.02],\n","       [593.02],\n","       [593.02],\n","       [593.02],\n","       [592.82],\n","       [590.53],\n","       [586.05],\n","       [578.87],\n","       [569.56],\n","       [557.68],\n","       [544.15],\n","       [529.1 ],\n","       [512.21],\n","       [496.1 ],\n","       [483.89],\n","       [470.18]])"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"markdown","metadata":{"id":"e31mswiSBEEB"},"source":["## Data Plot"]},{"cell_type":"code","metadata":{"id":"ooQPXSYhA_ps","colab":{"base_uri":"https://localhost:8080/","height":265},"executionInfo":{"status":"ok","timestamp":1628607414044,"user_tz":-330,"elapsed":698,"user":{"displayName":"Divya Ann Kurien","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhwVAxDCe4By3bFYuDBIMqEewXYJvrwZz0oMsWGSmU=s64","userId":"04998150813017052277"}},"outputId":"560ec8d1-4c2b-408c-abb3-effad00b9b6f"},"source":["#training_set = pd.read_csv('airline-passengers.csv')\n","#training_set = pd.read_csv('shampoo.csv')\n","\n","#training_set = training_set.iloc[:,1:2].values\n","\n","#plt.plot(training_set, label = 'Shampoo Sales Data')\n","#Y\n","plt.plot(training_set, label = 'Mobility')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"eE-WPE1gkRHI"},"source":["#X\n","plt.plot(training_set, label = 'Mobility')\n","plt.show()"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"NabsV8O5BBd5"},"source":["## Dataloading"]},{"cell_type":"code","metadata":{"id":"vIWvJCpOVmwU"},"source":["def sliding_windows(data, seq_length):\n","    x = []\n","    y = []\n","\n","    for i in range(len(data)-seq_length-1):\n","        _x = data[i:(i+seq_length)]\n","        _y = data[i+seq_length]\n","        x.append(_x)\n","        y.append(_y)\n","\n","    return np.array(x),np.array(y)\n","\n","sc = MinMaxScaler()\n","training_data = sc.fit_transform(training_set)\n","\n","seq_length = 4\n","x, y = sliding_windows(training_data, seq_length)\n","\n","train_size = int(len(y) * 0.8) #0.67\n","test_size = len(y) - train_size\n","\n","dataX = Variable(torch.Tensor(np.array(x)))\n","dataY = Variable(torch.Tensor(np.array(y)))\n","\n","trainX = Variable(torch.Tensor(np.array(x[0:train_size])))\n","trainY = Variable(torch.Tensor(np.array(y[0:train_size])))\n","\n","testX = Variable(torch.Tensor(np.array(x[train_size:len(x)])))\n","testY = Variable(torch.Tensor(np.array(y[train_size:len(y)])))"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"--1LVbHOBSIy"},"source":["## Model"]},{"cell_type":"code","metadata":{"id":"_BcDEjcABRVz"},"source":["class LSTM(nn.Module):\n","\n","    def __init__(self, num_classes, input_size, hidden_size, num_layers):\n","        super(LSTM, self).__init__()\n","        \n","        self.num_classes = num_classes\n","        self.num_layers = num_layers\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","        self.seq_length = seq_length\n","        \n","        self.lstm = nn.LSTM(input_size=input_size, hidden_size=hidden_size,\n","                            num_layers=num_layers, batch_first=True)\n","        \n","        self.fc = nn.Linear(hidden_size, num_classes)\n","\n","    def forward(self, x):\n","        h_0 = Variable(torch.zeros(\n","            self.num_layers, x.size(0), self.hidden_size))\n","        \n","        c_0 = Variable(torch.zeros(\n","            self.num_layers, x.size(0), self.hidden_size))\n","        \n","        # Propagate input through LSTM\n","        ula, (h_out, _) = self.lstm(x, (h_0, c_0))\n","        \n","        h_out = h_out.view(-1, self.hidden_size)\n","        \n","        out = self.fc(h_out)\n","        \n","        return out"],"execution_count":null,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"tdzFI5GJBUF5"},"source":["## Training"]},{"cell_type":"code","metadata":{"id":"a2vvHeFgVtCp","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1628607453308,"user_tz":-330,"elapsed":3845,"user":{"displayName":"Divya Ann Kurien","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhwVAxDCe4By3bFYuDBIMqEewXYJvrwZz0oMsWGSmU=s64","userId":"04998150813017052277"}},"outputId":"35e59950-c182-4f96-9942-6ec26219c487"},"source":["num_epochs = 2000\n","learning_rate = 0.01\n","\n","input_size = 1\n","hidden_size = 2\n","num_layers = 1\n","\n","num_classes = 1\n","\n","lstm = LSTM(num_classes, input_size, hidden_size, num_layers)\n","\n","criterion = torch.nn.MSELoss()    # mean-squared error for regression\n","optimizer = torch.optim.Adam(lstm.parameters(), lr=learning_rate)\n","#optimizer = torch.optim.SGD(lstm.parameters(), lr=learning_rate)\n","\n","# Train the model\n","for epoch in range(num_epochs):\n","    outputs = lstm(trainX)\n","    optimizer.zero_grad()\n","    \n","    # obtain the loss function\n","    loss = criterion(outputs, trainY)\n","    \n","    loss.backward()\n","    \n","    optimizer.step()\n","    if epoch % 100 == 0:\n","      print(\"Epoch: %d, loss: %1.5f\" % (epoch, loss.item()))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Epoch: 0, loss: 0.17255\n","Epoch: 100, loss: 0.00239\n","Epoch: 200, loss: 0.00224\n","Epoch: 300, loss: 0.00195\n","Epoch: 400, loss: 0.00135\n","Epoch: 500, loss: 0.00043\n","Epoch: 600, loss: 0.00020\n","Epoch: 700, loss: 0.00019\n","Epoch: 800, loss: 0.00017\n","Epoch: 900, loss: 0.00016\n","Epoch: 1000, loss: 0.00015\n","Epoch: 1100, loss: 0.00014\n","Epoch: 1200, loss: 0.00013\n","Epoch: 1300, loss: 0.00012\n","Epoch: 1400, loss: 0.00011\n","Epoch: 1500, loss: 0.00010\n","Epoch: 1600, loss: 0.00009\n","Epoch: 1700, loss: 0.00009\n","Epoch: 1800, loss: 0.00008\n","Epoch: 1900, loss: 0.00007\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"35ndYIwIKteS"},"source":["## Testing\n","\n","\n"]},{"cell_type":"code","metadata":{"id":"CKEzO1jzKydL","colab":{"base_uri":"https://localhost:8080/","height":294},"executionInfo":{"status":"ok","timestamp":1628607267555,"user_tz":-330,"elapsed":21,"user":{"displayName":"Divya Ann Kurien","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhwVAxDCe4By3bFYuDBIMqEewXYJvrwZz0oMsWGSmU=s64","userId":"04998150813017052277"}},"outputId":"4f003154-6b97-4ff8-ee6a-063731fb9fe4"},"source":["lstm.eval()\n","train_predict = lstm(dataX)\n","\n","data_predict = train_predict.data.numpy()\n","dataY_plot = dataY.data.numpy()\n","\n","data_predict = sc.inverse_transform(data_predict)\n","dataY_plot = sc.inverse_transform(dataY_plot)\n","\n","plt.axvline(x=train_size, c='r', linestyle='--')\n","\n","plt.plot(dataY_plot)\n","plt.plot(data_predict)\n","plt.suptitle('Time-Series Prediction-X')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":294},"id":"Hyv3E8e0kaSU","executionInfo":{"status":"ok","timestamp":1628607483098,"user_tz":-330,"elapsed":685,"user":{"displayName":"Divya Ann Kurien","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhwVAxDCe4By3bFYuDBIMqEewXYJvrwZz0oMsWGSmU=s64","userId":"04998150813017052277"}},"outputId":"7ee2a08e-68e2-4993-e3a5-2bd236461b3a"},"source":["lstm.eval()\n","train_predict = lstm(dataX)\n","\n","data_predict = train_predict.data.numpy()\n","dataY_plot = dataY.data.numpy()\n","\n","data_predict = sc.inverse_transform(data_predict)\n","dataY_plot = sc.inverse_transform(dataY_plot)\n","\n","plt.axvline(x=train_size, c='r', linestyle='--')\n","\n","plt.plot(dataY_plot)\n","plt.plot(data_predict)\n","plt.suptitle('Time-Series Prediction-Y')\n","plt.show()"],"execution_count":null,"outputs":[{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x288 with 1 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"E32xNKBuesPo"},"source":["lstm.eval()\n","test_predict = lstm(testX)\n","pred = test_predict.data.numpy()"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"jiV4ZEFeeWOn","executionInfo":{"status":"ok","timestamp":1628607492805,"user_tz":-330,"elapsed":11,"user":{"displayName":"Divya Ann Kurien","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhwVAxDCe4By3bFYuDBIMqEewXYJvrwZz0oMsWGSmU=s64","userId":"04998150813017052277"}},"outputId":"1e480c3b-9152-46d4-b2c7-0230bae6cbdf"},"source":["from sklearn.metrics import mean_squared_error\n","\n","\n","MSE_error = mean_squared_error(testY, pred)\n","print('Testing Mean Squared Error is {}'.format(MSE_error))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Testing Mean Squared Error is 0.001744373352266848\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"Hm_27t8JilU8"},"source":[""],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zBwRB4Y6SvJC","executionInfo":{"status":"ok","timestamp":1628607508425,"user_tz":-330,"elapsed":653,"user":{"displayName":"Divya Ann Kurien","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhwVAxDCe4By3bFYuDBIMqEewXYJvrwZz0oMsWGSmU=s64","userId":"04998150813017052277"}},"outputId":"3b5d6804-2ecc-40e1-a64d-9ad304b02fb1"},"source":["print(\"Root mean square error - RMSE \") \n","print(mean_squared_error(testY, pred, squared=False))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Root mean square error - RMSE \n","0.041765697\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"zg_V9Zb8SvLC","executionInfo":{"status":"ok","timestamp":1628607521348,"user_tz":-330,"elapsed":14,"user":{"displayName":"Divya Ann Kurien","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhwVAxDCe4By3bFYuDBIMqEewXYJvrwZz0oMsWGSmU=s64","userId":"04998150813017052277"}},"outputId":"9809c997-f981-4ce9-c0d8-b8c2ad63720e"},"source":["print(\"Mean absolute error - MAE\")\n","print(mean_absolute_error(testY, pred))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["Mean absolute error - MAE\n","0.023309395\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"cCAWFO59Zb2V"},"source":["from sklearn.utils.validation import check_consistent_length, check_array\n","\n","def mean_absolute_percentage_error(y_true, y_pred,\n","                                   sample_weight=None,\n","                                   multioutput='uniform_average'):\n","    \"\"\"Mean absolute percentage error regression loss.\n","    Note here that we do not represent the output as a percentage in range\n","    [0, 100]. Instead, we represent it in range [0, 1/eps]. Read more in the\n","    :ref:`User Guide <mean_absolute_percentage_error>`.\n","    .. versionadded:: 0.24\n","    Parameters\n","    ----------\n","    y_true : array-like of shape (n_samples,) or (n_samples, n_outputs)\n","        Ground truth (correct) target values.\n","    y_pred : array-like of shape (n_samples,) or (n_samples, n_outputs)\n","        Estimated target values.\n","    sample_weight : array-like of shape (n_samples,), default=None\n","        Sample weights.\n","    multioutput : {'raw_values', 'uniform_average'} or array-like\n","        Defines aggregating of multiple output values.\n","        Array-like value defines weights used to average errors.\n","        If input is list then the shape must be (n_outputs,).\n","        'raw_values' :\n","            Returns a full set of errors in case of multioutput input.\n","        'uniform_average' :\n","            Errors of all outputs are averaged with uniform weight.\n","    Returns\n","    -------\n","    loss : float or ndarray of floats in the range [0, 1/eps]\n","        If multioutput is 'raw_values', then mean absolute percentage error\n","        is returned for each output separately.\n","        If multioutput is 'uniform_average' or an ndarray of weights, then the\n","        weighted average of all output errors is returned.\n","        MAPE output is non-negative floating point. The best value is 0.0.\n","        But note the fact that bad predictions can lead to arbitarily large\n","        MAPE values, especially if some y_true values are very close to zero.\n","        Note that we return a large value instead of `inf` when y_true is zero.\n","    Examples\n","    --------\n","    >>> from sklearn.metrics import mean_absolute_percentage_error\n","    >>> y_true = [3, -0.5, 2, 7]\n","    >>> y_pred = [2.5, 0.0, 2, 8]\n","    >>> mean_absolute_percentage_error(y_true, y_pred)\n","    0.3273...\n","    >>> y_true = [[0.5, 1], [-1, 1], [7, -6]]\n","    >>> y_pred = [[0, 2], [-1, 2], [8, -5]]\n","    >>> mean_absolute_percentage_error(y_true, y_pred)\n","    0.5515...\n","    >>> mean_absolute_percentage_error(y_true, y_pred, multioutput=[0.3, 0.7])\n","    0.6198...\n","    \"\"\"\n","    y_type, y_true, y_pred, multioutput = _check_reg_targets(\n","        y_true, y_pred, multioutput)\n","    check_consistent_length(y_true, y_pred, sample_weight)\n","    epsilon = np.finfo(np.float64).eps\n","    mape = np.abs(y_pred - y_true) / np.maximum(np.abs(y_true), epsilon)\n","    output_errors = np.average(mape,\n","                               weights=sample_weight, axis=0)\n","    if isinstance(multioutput, str):\n","        if multioutput == 'raw_values':\n","            return output_errors\n","        elif multioutput == 'uniform_average':\n","            # pass None as weights to np.average: uniform mean\n","            multioutput = None\n","\n","    return np.average(output_errors, weights=multioutput)\n","\n","def _check_reg_targets(y_true, y_pred, multioutput, dtype=\"numeric\"):\n","    \"\"\"Check that y_true and y_pred belong to the same regression task.\n","    Parameters\n","    ----------\n","    y_true : array-like\n","    y_pred : array-like\n","    multioutput : array-like or string in ['raw_values', uniform_average',\n","        'variance_weighted'] or None\n","        None is accepted due to backward compatibility of r2_score().\n","    Returns\n","    -------\n","    type_true : one of {'continuous', continuous-multioutput'}\n","        The type of the true target data, as output by\n","        'utils.multiclass.type_of_target'.\n","    y_true : array-like of shape (n_samples, n_outputs)\n","        Ground truth (correct) target values.\n","    y_pred : array-like of shape (n_samples, n_outputs)\n","        Estimated target values.\n","    multioutput : array-like of shape (n_outputs) or string in ['raw_values',\n","        uniform_average', 'variance_weighted'] or None\n","        Custom output weights if ``multioutput`` is array-like or\n","        just the corresponding argument if ``multioutput`` is a\n","        correct keyword.\n","    dtype : str or list, default=\"numeric\"\n","        the dtype argument passed to check_array.\n","    \"\"\"\n","    check_consistent_length(y_true, y_pred)\n","    y_true = check_array(y_true, ensure_2d=False, dtype=dtype)\n","    y_pred = check_array(y_pred, ensure_2d=False, dtype=dtype)\n","\n","    if y_true.ndim == 1:\n","        y_true = y_true.reshape((-1, 1))\n","\n","    if y_pred.ndim == 1:\n","        y_pred = y_pred.reshape((-1, 1))\n","\n","    if y_true.shape[1] != y_pred.shape[1]:\n","        raise ValueError(\"y_true and y_pred have different number of output \"\n","                         \"({0}!={1})\".format(y_true.shape[1], y_pred.shape[1]))\n","\n","    n_outputs = y_true.shape[1]\n","    allowed_multioutput_str = ('raw_values', 'uniform_average',\n","                               'variance_weighted')\n","    if isinstance(multioutput, str):\n","        if multioutput not in allowed_multioutput_str:\n","            raise ValueError(\"Allowed 'multioutput' string values are {}. \"\n","                             \"You provided multioutput={!r}\".format(\n","                                 allowed_multioutput_str,\n","                                 multioutput))\n","    elif multioutput is not None:\n","        multioutput = check_array(multioutput, ensure_2d=False)\n","        if n_outputs == 1:\n","            raise ValueError(\"Custom weights are useful only in \"\n","                             \"multi-output cases.\")\n","        elif n_outputs != len(multioutput):\n","            raise ValueError((\"There must be equally many custom weights \"\n","                              \"(%d) as outputs (%d).\") %\n","                             (len(multioutput), n_outputs))\n","    y_type = 'continuous' if n_outputs == 1 else 'continuous-multioutput'\n","\n","    return y_type, y_true, y_pred, multioutput"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"MEhie1qgSvN6","executionInfo":{"status":"ok","timestamp":1628607533320,"user_tz":-330,"elapsed":596,"user":{"displayName":"Divya Ann Kurien","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14GhwVAxDCe4By3bFYuDBIMqEewXYJvrwZz0oMsWGSmU=s64","userId":"04998150813017052277"}},"outputId":"858a34c4-428f-462d-cc71-e81cace6c92f"},"source":["print(\"MAPE\")\n","print(mean_absolute_percentage_error(testY, pred))"],"execution_count":null,"outputs":[{"output_type":"stream","text":["MAPE\n","0.1483472\n"],"name":"stdout"}]}]}